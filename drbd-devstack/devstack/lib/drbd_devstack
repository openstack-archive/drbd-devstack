#!/bin/bash
# vim: set et ts=4 sw=4 ft=sh :
# Can we set global variables here?
# Hash to access LINBIT repositories
FILES="$(dirname '$0')/files"

function pre_install_drbd_devstack {
    # Install OS packages, if necessary
    # see wget logic in https://github.com/openstack-dev/devstack/blob/master/pkg/elasticsearch.sh
    # drbdmanage, drbd-dkms, drbd-utils
    if [[ ! -d ${FILES}  ]]; then
        mkdir ${FILES}
    fi
    # drbd-dkms="drbd-dkms_9.0.0rc2-1_all.deb"
    # drbd-utils="drbd-utils_8.9.2+linbit-1_amd64.deb"
    # drbd-manage="python-drbdmanage_0.20-33_all.deb"
    packages=('drbd-utils_8.9.3rc1-1_amd64.deb' 'drbd8-utils_8.9.3rc1-1_amd64.deb' 'drbd-dkms_9.0.0rc3-1_all.deb' 'python-drbdmanage_0.34-1_all.deb');
    # get packages
    for p in "${packages[@]}"; do
        if [[ ! -f ${FILES}/${p}* ]]; then
            # If there are newer packages, change the download number here.
            wget "http://openstack-ci-pkgs.linbit.com/packages/001/trusty/$p" -O ${FILES}/${p}
        fi
    done
    # install packages
    for i in "${packages[@]}"; do
        if [[ -f "${FILES}/${i}" ]]; then
            echo "installing ${i}"
            sudo dpkg -i ${FILES}/${i} || true
        fi
    done
    # now go fetch :)
    echo   echo "installing deps"
    #sudo apt-get update
    sudo apt-get install -f -y
    sudo apt-get install python-dbus -y
    return 0
}

function install_drbd_devstack {
    # Install the service.

    # write /etc/drbdmanage*.conf
    #echo "drbdctrl-vg     = $DRBD_DRBDCTRL_VG" >> /etc/drbdmanaged.conf
    #echo "volume-group    = $DRBD_DATA_VG"     >> /etc/drbdmanaged-lvm.conf
    sudo sed -i "s/^drbdctrl-vg\s*=.*/drbdctrl-vg = ${DRBD_DRBDCTRL_VG}/g" /etc/drbdmanaged.conf
    sudo sed -i "s/^volume-group\s*=.*/volume-group = ${DRBD_DATA_VG}/g" /etc/drbdmanaged-lvm.conf

    # allow the stack user access to drbdmanage
    sudo echo << "EOF"  >  /etc/dbus-1/system.d/org.drbd.drbdmanaged-stack.conf
    <!DOCTYPE busconfig PUBLIC
        "-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN"
        "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
    <busconfig>
        <policy user="stack">
            <allow send_destination="org.drbd.drbdmanaged"/>
        </policy>
    </busconfig>
EOF

    # done.
}

function configure_drbd_devstack {
    # Configure the service.
    local be_name="${1:-drbdmanage}"

    iniset $CINDER_CONF "$be_name" volume_backend_name "$be_name"
    iniset $CINDER_CONF "$be_name" volume_driver cinder.volume.drivers.drbdmanagedrv.DrbdManageDriver
}

function init_drbd_devstack {
    # Initialize and start the service.
    # need to setup loopback device(s) for DRBD

    # dd if=/dev/zero of=${FILES}/${DRBD_DRBDCTRL_VG} count=1 bs=${DRBD_DRBDCTRL_VG_SZ}
    # mknod -m 660 /dev/${DRBD_DRBDCTRL_LODEV} b 7 66
    # losetup ${FILES}/${DRBD_DRBDCTRL_VG}
    # sed -i 's/global_filter = \[ /global_filter = \[ "a|loop3|", /g' /etc/lvm/lvm.conf
    # pvcreate /dev/loop3
    # vgcreate ${DRBD_DRBDCTRL_VG}

    # if the file exists, don't destroy it...
    if [[ ! -f ${FILES}/${DRBD_DRBDCTRL_VG} ]]; then
        #dd if=/dev/zero of=${FILES}/${DRBD_DRBDCTRL_VG} count=1 bs=${DRBD_DRBDCTRL_VG_SZ}
        sudo truncate -s ${DRBD_DRBDCTRL_VG_SZ} ${FILES}/${DRBD_DRBDCTRL_VG}
    fi

    # if the loop device is present, don't recreate it...
    if [[ ! -e /dev/${DRBD_DRBDCTRL_LODEV} ]]; then
        DRBDCTRL_LO_MINOR=`echo ${DRBD_DRBDCTRL_LODEV} | sed 's/loop//g'`
        sudo mknod -m 660 /dev/${DRBD_DRBDCTRL_LODEV} b 7 ${DRBDCTRL_LO_MINOR}
    fi

    # if the file is already assigned a loop device, don't reassign
    sudo losetup -a | grep ${DRBD_DRBDCTRL_LODEV} | grep -q ${DRBD_DRBDCTRL_VG}
    if [[ $? -ne 0 ]]; then
        sudo losetup /dev/${DRBD_DRBDCTRL_LODEV} ${FILES}/${DRBD_DRBDCTRL_VG}
    fi

    # if the lvm.conf already accepts the loop device, don't insert it again
    sudo grep -q ${DRBD_DRBDCTRL_LODEV} /etc/lvm/lvm.conf
    if [[ $? -ne 0 ]]; then
        sudo sed -i.drbdctrl-bak "s/global_filter = \[ /global_filter = \[ \"a|${DRBD_DRBDCTRL_LODEV}|\", /g" /etc/lvm/lvm.conf
    fi

    # if theres already a pv signature, don't try to recreate
    sudo pvdisplay | grep -q ${DRBD_DRBDCTRL_LODEV}
    if [[ $? -ne 0 ]]; then
        sudo pvscan
        sudo pvdisplay | grep -q ${DRBD_DRBDCTRL_LODEV}
        if [[ $? -ne 0 ]]; then
            sudo pvcreate /dev/${DRBD_DRBDCTRL_LODEV}
        fi
    fi

    # if theres already a vg, don't try to recreate
    sudo vgdisplay | grep -q ${DRBD_DRBDCTRL_VG}
    if [[ $? -ne 0 ]]; then
        sudo vgscan
        sudo vgdisplay | grep -q ${DRBD_DRBDCTRL_VG}
        if [[ $? -ne 0 ]]; then
            sudo vgcreate ${DRBD_DRBDCTRL_VG} /dev/${DRBD_DRBDCTRL_LODEV}
        fi
    fi

    # Do the same thing for the DATA volume group
    # dd if=/dev/zero of=${FILES}/${DRBD_DATA_VG} count=1 bs=${DRBD_DATA_VG_SZ}
    # losetup ${FILES}/${DRBD_DATA_VG}
    # sed -i 's/global_filter = \[ /global_filter = \[ "a|loop4|", /g' /etc/lvm/lvm.conf
    # pvcreate /dev/loop4
    # vgcreate ${DRBD_DATA_VG}

    # if the file exists, don't destroy it...
    if [[ ! -f ${FILES}/${DRBD_DATA_VG} ]]; then
        #dd if=/dev/zero of=${FILES}/${DRBD_DATA_VG} count=1 bs=${DRBD_DATA_VG_SZ}
        sudo truncate -s ${DRBD_DATA_VG_SZ} ${FILES}/${DRBD_DATA_VG}
    fi

    # if the loop device is present, don't recreate it...
    if [[ ! -e /dev/${DRBD_DATA_LODEV} ]]; then
        DATA_LO_MINOR=`echo ${DRBD_DATA_LODEV} | sed 's/loop//g'`
        sudo mknod -m 660 /dev/${DRBD_DATA_LODEV} b 7 ${DATA_LO_MINOR}
    fi

    # if the file is already assigned a loop device, don't reassign
    sudo losetup -a | grep ${DRBD_DATA_LODEV} | grep -q ${DRBD_DATA_VG}
    if [[ $? -ne 0 ]]; then
        sudo losetup /dev/${DRBD_DATA_LODEV} ${FILES}/${DRBD_DATA_VG}
    fi

    # if the lvm.conf already accepts the loop device, don't insert it again
    sudo grep -q ${DRBD_DATA_LODEV} /etc/lvm/lvm.conf
    if [[ $? -ne 0 ]]; then
        sudo sed -i.drbddata-bak "s/global_filter = \[ /global_filter = \[ \"a|${DRBD_DATA_LODEV}|\", /g" /etc/lvm/lvm.conf
    fi

    # if theres already a pv signature, don't try to recreate
    sudo pvdisplay | grep -q ${DRBD_DATA_LODEV}
    if [[ $? -ne 0 ]]; then
        sudo pvscan
        sudo pvdisplay | grep -q ${DRBD_DATA_LODEV}
        if [[ $? -ne 0 ]]; then
            sudo pvcreate /dev/${DRBD_DATA_LODEV}
        fi
    fi

    # if theres already a vg, don't try to recreate
    sudo vgdisplay | grep -q ${DRBD_DATA_VG}
    if [[ $? -ne 0 ]]; then
        sudo vgscan
        sudo vgdisplay | grep -q ${DRBD_DATA_VG}
        if [[ $? -ne 0 ]]; then
            sudo vgcreate ${DRBD_DATA_VG} /dev/${DRBD_DATA_LODEV}
        fi
    fi

    # initialize drbdmanage
    sudo drbdmanage init --quiet
    # FIXME: multi-node setups
}

function shutdown_drbd_devstack {
    # Shut the service down.
    # drbdadm down all
    # drbdmanage shutdown --quiet
    echo "shutdown drbd devstack"
}

function cleanup_drbd_devstack {
    # Cleanup the service.
    # something like
    #     drbdmanage list-resource --short | xargs -l drbdmanage remove-resource
    # ???
    # drbdmanage resources -m | sed 's/,.*//g' | xargs -l drbdmanage remove-resource --quiet
    echo "cleanup drbd devstack"
}

#debug main
#source $(dirname '$0')/../settings
#pre_install_drbd_devstack
#install_drbd_devstack
#configure_drbd_devstack
#init_drbd_devstack

# Tell emacs to use shell-script-mode
## Local variables:
## mode: shell-script
## End:
